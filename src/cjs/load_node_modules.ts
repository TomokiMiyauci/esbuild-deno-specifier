import { join } from "../../deps.ts";
import { loadAsFile } from "./load_file.ts";
import { loadPackageExports } from "./load_package_exports.ts";
import { loadAsDirectory } from "./load_as_directory.ts";
import type { Context, LoadResult } from "./types.ts";
import type { Subpath } from "../types.ts";

export async function loadNodeModules(
  name: string,
  subpath: Subpath,
  context: Pick<
    Context,
    | "conditions"
    | "mainFields"
    | "resolve"
    | "readFile"
    | "existFile"
    | "existDir"
    | "root"
    | "nodeModulesPaths"
    | "specifier"
  >,
): Promise<LoadResult | false | undefined> {
  const dirs = context.nodeModulesPaths({ name, subpath });

  for await (const dir of dirs) {
    const exportsResult = await loadPackageExports(
      dir,
      subpath,
      context,
    );

    if (exportsResult) return exportsResult;

    const url = join(dir, subpath);

    const loadResult = await loadAsFile(url, context);
    if (loadResult) return loadResult;

    const dirResult = await loadAsDirectory(url, context);
    if (dirResult !== undefined) return dirResult;
  }
}
