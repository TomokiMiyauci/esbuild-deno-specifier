import { join } from "@std/url/join";
import { loadAsFile } from "./load_file.ts";
import { loadPackageExports } from "./load_package_exports.ts";
import { loadAsDirectory } from "./load_as_directory.ts";
import { parseNpmPkg } from "../../utils.ts";
import type { Context, ResolveArgs } from "./types.ts";
import type { Subpath } from "../../types.ts";

export async function loadNodeModules(
  specifier: string,
  context: Context,
): Promise<URL | undefined> {
  const { name, subpath } = parseNpmPkg(specifier);
  const packageURL = await context.getPackageURL(name, subpath);

  if (!packageURL) return;

  const result = await loadNodeModule(packageURL, subpath, {
    ...context,
    specifier,
  });
  if (result) return result;
}

export async function loadNodeModule(
  packageURL: URL,
  subpath: Subpath,
  context:
    & Context
    & Pick<ResolveArgs, "specifier">,
): Promise<URL | undefined> {
  const exportsResult = await loadPackageExports(packageURL, subpath, context);
  if (exportsResult) return exportsResult;

  const url = join(packageURL, subpath);

  const loadResult = await loadAsFile(url, context);
  if (loadResult) return loadResult;

  const dirResult = await loadAsDirectory(url, context);
  if (dirResult) return dirResult;
}
